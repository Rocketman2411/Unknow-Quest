//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/ScriptHichem/PlayerMovement/CameraRotation.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraRotation : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraRotation()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraRotation"",
    ""maps"": [
        {
            ""name"": ""Rotation"",
            ""id"": ""4d1fe45e-6298-4c34-9908-5fd4c8c1f0e1"",
            ""actions"": [
                {
                    ""name"": ""RotateKey"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7b69d33d-b619-4cf2-b748-b885e9771457"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ControllerInpout"",
                    ""id"": ""ac32e708-e6cf-48cd-a582-976f06916540"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateKey"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""09fae680-436e-4121-8662-b82eccee5a51"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5215eae9-5222-4ed0-ab49-2bea0d866f2a"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3eccf1da-cfb6-4b4e-bc54-e26a18ed56f6"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1a62899f-4785-450a-abc3-60a722f608e5"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Rotation
        m_Rotation = asset.FindActionMap("Rotation", throwIfNotFound: true);
        m_Rotation_RotateKey = m_Rotation.FindAction("RotateKey", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Rotation
    private readonly InputActionMap m_Rotation;
    private IRotationActions m_RotationActionsCallbackInterface;
    private readonly InputAction m_Rotation_RotateKey;
    public struct RotationActions
    {
        private @CameraRotation m_Wrapper;
        public RotationActions(@CameraRotation wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateKey => m_Wrapper.m_Rotation_RotateKey;
        public InputActionMap Get() { return m_Wrapper.m_Rotation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotationActions set) { return set.Get(); }
        public void SetCallbacks(IRotationActions instance)
        {
            if (m_Wrapper.m_RotationActionsCallbackInterface != null)
            {
                @RotateKey.started -= m_Wrapper.m_RotationActionsCallbackInterface.OnRotateKey;
                @RotateKey.performed -= m_Wrapper.m_RotationActionsCallbackInterface.OnRotateKey;
                @RotateKey.canceled -= m_Wrapper.m_RotationActionsCallbackInterface.OnRotateKey;
            }
            m_Wrapper.m_RotationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RotateKey.started += instance.OnRotateKey;
                @RotateKey.performed += instance.OnRotateKey;
                @RotateKey.canceled += instance.OnRotateKey;
            }
        }
    }
    public RotationActions @Rotation => new RotationActions(this);
    public interface IRotationActions
    {
        void OnRotateKey(InputAction.CallbackContext context);
    }
}
