//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/ScriptHichem/PlayerAction/PlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAction"",
    ""maps"": [
        {
            ""name"": ""CombatAction"",
            ""id"": ""a86ec19e-300a-47a9-867e-2b13dbd06571"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""7b5b2756-6f25-42f4-98e2-f944c0900ba7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""412756e1-e04a-48c9-9e45-13996451e819"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27ea6dd2-3719-41c9-9551-ddb8fb62f0d9"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb1bb975-58c0-4baf-9ff9-81202495d8b7"",
                    ""path"": ""<Keyboard>/#(Q)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CombatAction
        m_CombatAction = asset.FindActionMap("CombatAction", throwIfNotFound: true);
        m_CombatAction_Attack = m_CombatAction.FindAction("Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CombatAction
    private readonly InputActionMap m_CombatAction;
    private ICombatActionActions m_CombatActionActionsCallbackInterface;
    private readonly InputAction m_CombatAction_Attack;
    public struct CombatActionActions
    {
        private @PlayerAction m_Wrapper;
        public CombatActionActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_CombatAction_Attack;
        public InputActionMap Get() { return m_Wrapper.m_CombatAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActionActions set) { return set.Get(); }
        public void SetCallbacks(ICombatActionActions instance)
        {
            if (m_Wrapper.m_CombatActionActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_CombatActionActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_CombatActionActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_CombatActionActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_CombatActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public CombatActionActions @CombatAction => new CombatActionActions(this);
    public interface ICombatActionActions
    {
        void OnAttack(InputAction.CallbackContext context);
    }
}
